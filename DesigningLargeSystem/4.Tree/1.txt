1) Изменено наследование класса TNode (теперь наследуется от  enable_shared_from_this. результат: weak_ptr знает обо всех shared_ptr, указывающих на родителя), чтобы корренктно менять левый и правый узлы: 
при замене левого или правого узла создаётся новый shared_ptr на родителя. Полученый shared_ptr не знает о внешнем shared_ptr, и он удалён к концу вызова replaceLeft или replaceRight. Тогда weak_ptr, указывающий на родителя у нового левого или правого узла, остаётся без shared_ptrов и тоже удаляется, как следствие всего, происходит утечка памяти. 
 

2) В методе fork параметры изменены с TNode* на TNodePtr, чтобы при создании нового объекта не создавались новые shared_ptr, указывающие на left и rigth, которые не знают ничего о старых указателях  на left и right и не происходило двойное удаление одних и тех же объектов.

3) Добавлены TNodeWeakPtr и TNodeConstWeakPtr, тип родителя изменён на TNodeWeakPtr (также изменены методы getParent и setParent). Раннее получалось перекрёстное владение указателей и при удалении происходит повторное удаление объектов или удаление несоздаваемой памяти (double free).

4) В методах createLeaf и fork в make_shared теперь вместо параметров передаются временные объекты, потому что конструкторы класса TNode private и make_shared не может их вызвать самостоятлеьно.

